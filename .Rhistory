keep.extra.columns=TRUE)
calls <- read.csv("call_cnvr_cnvnator/individual_cnv_cnvr.txt", sep = "\t")
calls <-  drop_na(calls)
names(calls)[names(calls) == "CNV_Value"] <- "state"
calls
calls <- calls[ -c(4,6:7,9) ]
calls
calls
grl <- GenomicRanges::makeGRangesListFromDataFrame(calls,
split.field="Sample_ID",
keep.extra.columns=TRUE)
grl
# SORT
grl <- GenomicRanges::sort(grl)
grl
ra <- RaggedExperiment::RaggedExperiment(grl)
ra
## Identifying recurrent regions
cnvrs <- populationRanges(grl, density=0.1, est.recur=TRUE)
cnvrs
subset(cnvrs, pvalue < 0.05)
plotRecurrentRegions(cnvrs, genome="hg19", chr="chr1")
## OVERLAP with functional genomic regions
library(AnnotationHub)
library(BiocManager)
install("BiocFileCache")
ah <- AnnotationHub::AnnotationHub()
ahDb <- AnnotationHub::query(ah, pattern = c("Homo sapiens", "Ensembl"))
ahDb
ahEdb <- ahDb[["AH10684"]]
ahEdb
hs.genes <- ensembldb::genes(ahEdb)
library(rtracklayer)
g <- readGFF("/Users/luciabazan/Downloads/gencode.v37lift37.annotation.gtf")
names(g)[names(g) == "seqid"] <- "chr"
g$chr<-gsub("chr","",as.character(g$chr))
g <- g[!duplicated(g$gene_id), ]
rownames(g) <- g$gene_id
granges_genes <- makeGRangesFromDataFrame(g, keep.extra.columns=TRUE)
granges_genes
## CNV and RNA-seq
rcounts  <- read.csv("data/rnaseq_counts_tpm.csv", row.names=1)
names(rcounts)[names(rcounts) == "LP6005441.DNA_D10"] <- "LP6005441-DNA_D10"
names(rcounts)[names(rcounts) == "LP6005441.DNA_B08"] <- "LP6005441-DNA_B08"
names(rcounts)[names(rcounts) == "LP6005441.DNA_G07"] <- "LP6005441-DNA_G07"
names(rcounts)[names(rcounts) == "LP6005441.DNA_H03"] <- "LP6005441-DNA_H03"
rcounts <- as.matrix(rcounts)
library(SummarizedExperiment)
rranges <- GenomicRanges::granges(granges_genes)[rownames(rcounts)]
rse <- SummarizedExperiment(assays=list(rcounts=rcounts), rowRanges=rranges)
rse
## CNV and RNA-seq
rcounts  <- read.csv("data/rnaseq_counts_tpm.csv", row.names=1)
names(rcounts)[names(rcounts) == "LP6005441.DNA_D10"] <- "LP6005441-DNA_D10"
names(rcounts)[names(rcounts) == "LP6005441.DNA_B08"] <- "LP6005441-DNA_B08"
names(rcounts)[names(rcounts) == "LP6005441.DNA_G07"] <- "LP6005441-DNA_G07"
names(rcounts)[names(rcounts) == "LP6005441.DNA_H03"] <- "LP6005441-DNA_H03"
rcounts <- as.matrix(rcounts)
library(SummarizedExperiment)
rranges <- GenomicRanges::granges(granges_genes)[rownames(rcounts)]
rse <- SummarizedExperiment(assays=list(rcounts=rcounts), rowRanges=rranges)
rse
grl
cnvrs
rse
res <- cnvEQTL(cnvrs, grl, rse, window = NULL, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='limma')
rse
res
library(curatedTCGAData)
BiocManager::install("curatedTCGAData")
library(curatedTCGAData)
gbm <- curatedTCGAData::curatedTCGAData("GBM",
assays=c("GISTIC_Peaks", "CNVSNP", "RNASeq2GeneNorm"),
version = "1.1.38",
dry.run=FALSE)
gbm
library(TCGAutils)
BiocManager::install("TCGAutils")
library(TCGAutils)
gbm <- TCGAutils::symbolsToRanges(gbm, unmapped=FALSE)
BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
library(TCGAutils)
gbm <- TCGAutils::symbolsToRanges(gbm, unmapped=FALSE)
BiocManager::install("org.Hs.eg.db")
library(TCGAutils)
gbm <- TCGAutils::symbolsToRanges(gbm, unmapped=FALSE)
res <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='limma')
res <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR')
res
View(res)
res@unlistData
(r <- GRanges(names(res)[1]))
plotEQTL(cnvr=r, genes=res[[2]], genome="hg19", cn="CN1")
plotEQTL(cnvr=r, genes=res[[1]], genome="hg19", cn="CN1")
View(res)
res
res
res
res[Pvalue < 0.05]
res[Pvalue(res) < 0.05]
res[res(PValue) < 0.05]
res <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR')
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR')
as.data.frame(result)
(r <- GRanges(names(res)[6]))
plotEQTL(cnvr=r, genes=res[[6]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[1]))
plotEQTL(cnvr=r, genes=res[[1]], genome="hg19", cn="CN1")
names(res)[1]
names(res)[6]
genes=res[[6]]
res[[1]]
(r <- GRanges(names(res)[6]))
plotEQTL(cnvr=r, genes=res[[6]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[7]))
plotEQTL(cnvr=r, genes=res[[7]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[35]))
plotEQTL(cnvr=r, genes=res[[35]], genome="hg19", cn="CN1")
result_dt <-as.data.frame(result)
View(result_dt)
(r <- GRanges(names(res)[8]))
plotEQTL(cnvr=r, genes=res[[8]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[14]))
plotEQTL(cnvr=r, genes=res[[14]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[15]))
plotEQTL(cnvr=r, genes=res[[15]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[36]))
plotEQTL(cnvr=r, genes=res[[36]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[54]))
plotEQTL(cnvr=r, genes=res[[54]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[61]))
plotEQTL(cnvr=r, genes=res[[61]], genome="hg19", cn="CN1")
rcounts
rcounts <- rcounts[ -c(1:2) ]
rcounts
rcounts  <- read.csv("data/rnaseq_counts_tpm.csv", row.names=1)
names(rcounts)[names(rcounts) == "LP6005441.DNA_D10"] <- "LP6005441-DNA_D10"
names(rcounts)[names(rcounts) == "LP6005441.DNA_B08"] <- "LP6005441-DNA_B08"
names(rcounts)[names(rcounts) == "LP6005441.DNA_G07"] <- "LP6005441-DNA_G07"
names(rcounts)[names(rcounts) == "LP6005441.DNA_H03"] <- "LP6005441-DNA_H03"
rcounts <- as.matrix(rcounts)
rcounts <- rcounts[ -c(1:2) ]
rcounts
rcounts  <- read.csv("data/rnaseq_counts_tpm.csv", row.names=1)
names(rcounts)[names(rcounts) == "LP6005441.DNA_D10"] <- "LP6005441-DNA_D10"
names(rcounts)[names(rcounts) == "LP6005441.DNA_B08"] <- "LP6005441-DNA_B08"
names(rcounts)[names(rcounts) == "LP6005441.DNA_G07"] <- "LP6005441-DNA_G07"
names(rcounts)[names(rcounts) == "LP6005441.DNA_H03"] <- "LP6005441-DNA_H03"
rcounts <- rcounts[ -c(1:2) ]
rcounts <- as.matrix(rcounts)
rcounts
library(SummarizedExperiment)
rranges <- GenomicRanges::granges(granges_genes)[rownames(rcounts)]
rse <- SummarizedExperiment(assays=list(rcounts=rcounts), rowRanges=rranges)
rse
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR')
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 1,
de.method='edgeR')
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 1, min.state.freq = 1,
de.method='edgeR')
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 1, min.state.freq = 1,
de.method='edgeR')
rcounts  <- read.csv("data/rnaseq_counts_tpm.csv", row.names=1)
names(rcounts)[names(rcounts) == "LP6005441.DNA_D10"] <- "LP6005441-DNA_D10"
names(rcounts)[names(rcounts) == "LP6005441.DNA_B08"] <- "LP6005441-DNA_B08"
names(rcounts)[names(rcounts) == "LP6005441.DNA_G07"] <- "LP6005441-DNA_G07"
names(rcounts)[names(rcounts) == "LP6005441.DNA_H03"] <- "LP6005441-DNA_H03"
#rcounts <- rcounts[ -c(1:2) ]
rcounts <- as.matrix(rcounts)
rcounts
library(SummarizedExperiment)
rranges <- GenomicRanges::granges(granges_genes)[rownames(rcounts)]
rse <- SummarizedExperiment(assays=list(rcounts=rcounts), rowRanges=rranges)
rse
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 1, min.state.freq = 1,
de.method='edgeR', filter.by.expr=FALSE)
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR', filter.by.expr=FALSE)
result_dt <-as.data.frame(result)
View(result)
result
View(result_dt)
(r <- GRanges(names(res)[1]))
plotEQTL(cnvr=r, genes=res[[1]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[28]))
plotEQTL(cnvr=r, genes=res[[18]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[28]))
plotEQTL(cnvr=r, genes=res[[18]], genome="hg19", cn="CN4")
(r <- GRanges(names(res)[29]))
plotEQTL(cnvr=r, genes=res[[29]], genome="hg19", cn="CN4")
(r <- GRanges(names(res)[29]))
plotEQTL(cnvr=r, genes=res[[29]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[30]))
plotEQTL(cnvr=r, genes=res[[30]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[30]))
plotEQTL(cnvr=r, genes=res[[30]], genome="hg19", cn="CN4")
(r <- GRanges(names(res)[30]))
plotEQTL(cnvr=r, genes=res[[30]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[31]))
plotEQTL(cnvr=r, genes=res[[31]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[32]))
plotEQTL(cnvr=r, genes=res[[32]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[32]))
plotEQTL(cnvr=r, genes=res[[32]], genome="hg19", cn="CN4")
(r <- GRanges(names(res)[33]))
plotEQTL(cnvr=r, genes=res[[33]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[33]))
plotEQTL(cnvr=r, genes=res[[33]], genome="hg19", cn="CN4")
(r <- GRanges(names(res)[51]))
plotEQTL(cnvr=r, genes=res[[51]], genome="hg19", cn="CN4")
(r <- GRanges(names(res)[51]))
plotEQTL(cnvr=r, genes=res[[51]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[52]))
plotEQTL(cnvr=r, genes=res[[52]], genome="hg19", cn="CN1")
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR', filter.by.expr=FALSE)
result_dt <-as.data.frame(result)
View(result)
View(result_dt)
(r <- GRanges(names(res)[30]))
plotEQTL(cnvr=r, genes=res[[30]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[317]))
(r <- GRanges(names(res)[317]))
plotEQTL(cnvr=r, genes=res[[317]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[3]))
plotEQTL(cnvr=r, genes=res[[3]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[6]))
plotEQTL(cnvr=r, genes=res[[6]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[7]))
plotEQTL(cnvr=r, genes=res[[7]], genome="hg19", cn="CN1")
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 3, min.state.freq = 2,
de.method='edgeR', filter.by.expr=FALSE)
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR', filter.by.expr=FALSE)
result_dt <-as.data.frame(result)
(r <- GRanges(names(res)[65]))
plotEQTL(cnvr=r, genes=res[[65]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[35]))
plotEQTL(cnvr=r, genes=res[[35]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[51]))
plotEQTL(cnvr=r, genes=res[[51]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[75]))
plotEQTL(cnvr=r, genes=res[[75]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[34]))
plotEQTL(cnvr=r, genes=res[[34]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[65]))
plotEQTL(cnvr=r, genes=res[[65]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[91]))
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR') ##, filter.by.expr=FALSE
result_dt <-as.data.frame(result)
View(result_dt)
(r <- GRanges(names(res)[10]))
plotEQTL(cnvr=r, genes=res[[10]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[1]))
plotEQTL(cnvr=r, genes=res[[1]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[2]))
plotEQTL(cnvr=r, genes=res[[2]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[3]))
plotEQTL(cnvr=r, genes=res[[3]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[4]))
plotEQTL(cnvr=r, genes=res[[4]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[5]))
plotEQTL(cnvr=r, genes=res[[5]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[6]))
plotEQTL(cnvr=r, genes=res[[6]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[7]))
plotEQTL(cnvr=r, genes=res[[7]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[8]))
plotEQTL(cnvr=r, genes=res[[8]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[9]))
plotEQTL(cnvr=r, genes=res[[9]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[10]))
plotEQTL(cnvr=r, genes=res[[10]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[11]))
plotEQTL(cnvr=r, genes=res[[11]], genome="hg19", cn="CN1")
(r <- GRanges(names(res)[12]))
plotEQTL(cnvr=r, genes=res[[12]], genome="hg19", cn="CN1")
for (x in 1:10) {
(r <- GRanges(names(res)[x]))
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1")
}
for (x in 1:10) {
(r <- GRanges(names(res)[x]))
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1")
}
plotEQTL(cnvr=r, genes=res[[12]], genome="hg19", cn="CN1")
rse
result
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1")
}
for (x in 1:72) {
print(x)
(r <- GRanges(names(res)[x]))
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1")
}
for (x in 1:72) {
print(x)
try(r <- GRanges(names(res)[x]))
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1", silent=TRUE)
}
for (x in 1:72) {
print(x)
try((r <- GRanges(names(res)[x]))
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"), silent=TRUE)
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
print(x)
}
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1")
print(x)
if ( _rc ) {
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
print(x)
silent=TRUE)
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
print(x)
}
# Open pdf file
pdf(file= "sample.pdf" )
# create a 2X2 grid
par( mfrow= c(2,2) )
# draw plots
plot(1:10)
plot(1:20)
plot(1:30)
plot(1:40)
# Open pdf file
pdf(file= "sample.pdf" )
# draw plots
plot(1:10)
plot(1:20)
# Open pdf file
pdf(file= "sample.pdf" )
# draw plots
plot(1:10)
plot(1:20)
dev.off()
for (x in 1:72) {
pdf(file= "sample.pdf" )
print(x)
(r <- GRanges(names(res)[x]))
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1")
dev.off()
}
for (x in 1:72) {
pdf(file= "sample.pdf" )
print(x)
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
dev.off()
}
pdf(file= "sample.pdf" )
for (x in 1:72) {
print(x)
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
dev.off()
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
pdf(file= "sample.pdf" )
for (x in 1:72) {
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
dev.off()
pdf(file= "sample.pdf" )
for (x in 1:72) {
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
dev.off()
pdf(file= "sample.pdf" )
for (x in 1:72) {
print(try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE))
}
dev.off()
library(Gviz)
library(ggplot2)
pdf(file= "sample.pdf" )
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
dev.off()
pdf(file= "degs_expression_filter.pdf" )
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
dev.off()
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR', filter.by.expr=FALSE)
result_dt <-as.data.frame(result)
pdf(file= "degs_expression_filter_no.pdf" )
for (x in 1:72) {
(r <- GRanges(names(res)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
dev.off()
result_dt <-as.data.frame(result)
result
pdf(file= "degs_expression_filter_no.pdf" )
for (x in 1:91) {
(r <- GRanges(names(res)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
for (x in 1:91) {
(r <- GRanges(names(res)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=res[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
result <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR', filter.by.expr=FALSE) ##,
pdf(file= "degs_expression_filter_no.pdf" )
for (x in 1:91) {
(r <- GRanges(names(result)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=result[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
dev.off()
result_exp_filter <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR') ##, filter.by.expr=FALSE
View(result_dt)
result_exp_filter <- cnvEQTL(cnvrs, grl, rse, verbose = TRUE, min.samples = 2, min.state.freq = 2,
de.method='edgeR') ##, filter.by.expr=FALSE
result_dt_exp_filter <-as.data.frame(result)
pdf(file= "degs_expression_filter.pdf" )
for (x in 1:75) {
(r <- GRanges(names(result_exp_filter)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=result_exp_filter[[x]], genome="hg19", cn="CN1"),
silent=TRUE)
}
dev.off()
View(result_dt_exp_filter)
View(result_dt_exp_filter)
for (x in 1:91) {
(r <- GRanges(names(result)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=result[[x]], genome="t2t", cn="CN1"),
silent=TRUE)
}
for (x in 1:91) {
(r <- GRanges(names(result)[x]))
print(x)
try(
plotEQTL(cnvr=r, genes=result[[x]], genome="t2t", cn="CN1"),
silent=TRUE)
}
